Я внимательно изучил документ и модели таблиц, которые вы предоставили. Понимаю, что вам нужно создать отдельный сервис для планирования уведомлений заемщикам о выплате кредита. Давайте составим техническое задание.

# Техническое задание на разработку сервиса планирования уведомлений для P2P-платформы

## 1. Общее описание

Создание отдельного микросервиса для планирования и отправки уведомлений заемщикам о предстоящих и просроченных платежах по кредитам согласно стратегии управления просроченной задолженностью.

## 2. Технический стек

- **Бэкенд**: Node.js, Express.js
- **База данных**: MongoDB
- **Размещение**: AWS EC2
- **Планировщик**: Bull + Redis
- **Коммуникация**: REST API для взаимодействия с основным сервисом

## 3. Функциональные требования

### 3.1. Основные функции

1. **Планирование уведомлений**:
   - Создание задач в планировщике для каждого этапа коммуникации согласно таблицам стратегии
   - Отслеживание статуса кредита для остановки уведомлений при погашении

2. **Интеграция с основным сервисом**:
   - Получение информации о новых кредитах
   - Получение обновлений о статусе кредитов
   - Синхронизация данных о заемщиках

3. **Отправка уведомлений**:
   - Push-уведомления
   - Email-сообщения
   - SMS
   - AI-звонки (интеграция с сервисом автоматических звонков)

4. **Мониторинг и статистика**:
   - Сбор статистики по отправленным уведомлениям
   - Отслеживание эффективности различных каналов коммуникации

### 3.2. Этапы уведомлений

В соответствии с документом, реализовать:

1. **Превентивная фаза** (до наступления срока платежа): -5, -3, -2, -1, 0 дней
2. **Фаза ранней просрочки** (1-7 дней)
3. **Фаза средней просрочки** (8-15 дней)
4. **Фаза поздней просрочки** (16-30 дней)

## 4. Архитектура системы

### 4.1. Компоненты

1. **API Gateway**:
   - Принимает запросы от основного сервиса
   - Валидирует данные и права доступа

2. **Планировщик (Bull/Redis)**:
   - Хранит очереди задач для каждого типа уведомлений
   - Выполняет задачи в запланированное время
   - Поддерживает приоритеты и повторные попытки

3. **Сервис коммуникации**:
   - Интегрируется с провайдерами SMS, email, push-уведомлений
   - Форматирует сообщения в соответствии со стратегией
   - Предоставляет шаблоны для разных типов уведомлений

4. **Сервис мониторинга состояния кредитов**:
   - Периодически проверяет статусы кредитов
   - Отменяет запланированные уведомления для закрытых кредитов

5. **База данных**:
   - Хранит информацию о запланированных уведомлениях
   - Сохраняет статистику отправки и реакции на уведомления

### 4.2. Схема потока данных

1. Основной сервис отправляет информацию о новом кредите
2. API Gateway принимает и валидирует запрос
3. Планировщик создает набор задач согласно стратегии
4. В запланированное время задачи активируются
5. Перед отправкой каждого уведомления проверяется статус кредита
6. Если кредит активен, уведомление отправляется
7. Результат отправки сохраняется в базе данных
8. Основной сервис может получать статистику по отправленным уведомлениям

## 5. Структура API

### 5.1. Основные эндпоинты

1. **POST /api/notification-plans**
   - Создает план уведомлений для нового кредита
   - Параметры: creditId, borrowerId, startDate, dueDate, amount

2. **PUT /api/notification-plans/:creditId**
   - Обновляет план уведомлений (например, при изменении срока платежа)
   - Параметры: новые параметры кредита

3. **DELETE /api/notification-plans/:creditId**
   - Отменяет все запланированные уведомления для кредита
   - Используется при досрочном погашении или закрытии кредита

4. **GET /api/notification-plans/:creditId**
   - Возвращает информацию о запланированных уведомлениях
   - Статусы отправки, следующие уведомления

5. **GET /api/statistics**
   - Предоставляет статистику по отправленным уведомлениям
   - Параметры фильтрации: период, тип уведомления, результат

### 5.2. Взаимодействие с моделями данных

С учётом предоставленных моделей:

- **Credit Model**: Использовать для получения статуса кредита, суммы, сроков
- **Borrower Model**: Использовать для получения контактной информации заемщика
- **BankTransaction Model**: Мониторить для определения поступления платежей

## 6. Планирование задач

### 6.1. Структура задач в Bull

1. **NotificationJob**:
   ```javascript
   {
     creditId: String,          // ID кредита
     borrowerId: String,        // ID заемщика
     stage: String,             // Фаза (превентивная, ранняя просрочка и т.д.)
     day: Number,               // День относительно срока платежа
     channels: [String],        // Каналы коммуникации (SMS, Email, Push)
     templateId: String,        // ID шаблона сообщения
     scheduledFor: Date         // Запланированное время отправки
   }
   ```

### 6.2. Оптимизация производительности

1. **Группировка задач**:
   - Объединение однотипных уведомлений в батчи
   - Распределение нагрузки по времени для избежания пиков

2. **Кэширование данных**:
   - Кэширование статусов кредитов для уменьшения запросов к БД
   - Кэширование шаблонов сообщений

3. **Масштабирование**:
   - Горизонтальное масштабирование воркеров Bull
   - Реализация кластеризации для обработки ~10000 кредитов в сутки

## 7. Обработка ошибок и мониторинг

### 7.1. Стратегии обработки ошибок

1. **Повторные попытки**:
   - Настройка политики ретраев для неудачных отправок
   - Экспоненциальная задержка между попытками

2. **Логирование**:
   - Детальное логирование всех операций
   - Сохранение истории всех отправленных уведомлений

3. **Алерты**:
   - Настройка оповещений при критических ошибках
   - Мониторинг доступности внешних сервисов (SMS, Email)

### 7.2. Инструменты мониторинга

1. **Метрики системы**:
   - Количество обрабатываемых задач
   - Время обработки
   - Количество ошибок

2. **Бизнес-метрики**:
   - Конверсия уведомлений в платежи
   - Эффективность различных каналов коммуникации

## 8. Модели данных микросервиса

### 8.1. NotificationPlan

```javascript
{
  creditId: { type: String, required: true, index: true },
  borrowerId: { type: String, required: true },
  dueDate: { type: Date, required: true },
  amount: { type: Number, required: true },
  currency: { type: String, default: "EUR" },
  status: { type: String, enum: ["active", "completed", "cancelled"] },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
}
```

### 8.2. NotificationRecord

```javascript
{
  planId: { type: String, required: true, index: true },
  creditId: { type: String, required: true, index: true },
  stage: { type: String, required: true },
  day: { type: Number, required: true },
  channel: { type: String, required: true },
  messageTemplate: { type: String, required: true },
  scheduledFor: { type: Date, required: true },
  sentAt: { type: Date },
  status: { type: String, enum: ["scheduled", "sent", "failed", "cancelled"] },
  failReason: { type: String },
  retryCount: { type: Number, default: 0 },
}
```

## 9. Правовые аспекты

В соответствии с разделом "Правовые аспекты и ограничения" из документа:

1. **Соблюдение законодательства ЕС и Словакии**:
   - Не отправлять уведомления в ночное время (22:00-8:00)
   - Не отправлять более 3 уведомлений в день
   - Соблюдать законодательство о защите персональных данных

2. **Запрещенные практики**:
   - Избегать недопустимых угроз
   - Контролировать частоту уведомлений
   - Соблюдать временные ограничения

## 10. Тестирование и внедрение

### 10.1. Стратегия тестирования

1. **Модульное тестирование**:
   - Тестирование всех компонентов API
   - Тестирование логики планирования

2. **Интеграционное тестирование**:
   - Проверка взаимодействия с Bull/Redis
   - Проверка взаимодействия с основным сервисом

3. **Нагрузочное тестирование**:
   - Тестирование производительности при высокой нагрузке
   - Симуляция обработки 10000+ кредитов

### 10.2. План внедрения

1. **Этапы внедрения**:
   - Разработка базовой функциональности
   - Тестирование в изолированной среде
   - Интеграция с основным сервисом в тестовой среде
   - Постепенное развертывание в производственной среде

2. **Миграция данных**:
   - План миграции данных о существующих кредитах
   - Стратегия постепенного перехода

## 11. Масштабирование и безопасность

### 11.1. Масштабирование

1. **Горизонтальное масштабирование**:
   - Настройка кластера Redis для Bull
   - Распределение нагрузки между несколькими экземплярами сервиса

2. **Оптимизация ресурсов**:
   - Настройка приоритетов для различных типов уведомлений
   - Распределение нагрузки по времени

### 11.2. Безопасность

1. **Защита API**:
   - Авторизация запросов с основного сервиса
   - Ограничение доступа только для авторизованных клиентов

2. **Защита данных**:
   - Шифрование чувствительной информации
   - Соблюдение требований GDPR

## 12. Приоритеты разработки

1. **MVP (первая итерация)**:
   - Базовое API для создания планов уведомлений
   - Поддержка Email и SMS уведомлений
   - Простая проверка статуса кредита

2. **Вторая итерация**:
   - Добавление Push-уведомлений
   - Улучшенная статистика и мониторинг
   - Оптимизация для высокой нагрузки

3. **Третья итерация**:
   - Интеграция с AI-звонками
   - Адаптивные стратегии уведомлений
   - Полная автоматизация процесса

## 13. Оценка времени и ресурсов

1. **Разработка MVP**: 3-4 недели
   - Создание базовой архитектуры: 1 неделя
   - Реализация API и планировщика: 1-2 недели
   - Интеграция с каналами коммуникации: 1 неделя

2. **Тестирование и отладка**: 1-2 недели

3. **Команда**:
   - Backend разработчик: 1-2 человека
   - DevOps инженер: 1 человек (частичная занятость)
   - QA инженер: 1 человек (частичная занятость)

## 14. Риски и их митигация

1. **Высокая нагрузка**:
   - Риск: Система не справится с объемом в 10000+ кредитов
   - Митигация: Нагрузочное тестирование, оптимизация, кэширование

2. **Зависимость от внешних сервисов**:
   - Риск: Недоступность провайдеров SMS/Email
   - Митигация: Резервные провайдеры, очереди отложенной отправки

3. **Правовые риски**:
   - Риск: Нарушение законодательства о коммуникациях
   - Митигация: Строгое соблюдение временных ограничений, мониторинг изменений в законодательстве

## 15. Документация

1. **API документация**:
   - Swagger/OpenAPI спецификация
   - Примеры запросов и ответов

2. **Техническая документация**:
   - Архитектура системы
   - Руководство по развертыванию
   - Руководство по мониторингу

3. **Пользовательская документация**:
   - Инструкции для администраторов основного сервиса
   - Описание процесса взаимодействия с планировщиком

Данное ТЗ предоставляет общую структуру и требования для разработки сервиса планирования уведомлений для P2P-платформы. Детали реализации могут быть уточнены в процессе разработки.